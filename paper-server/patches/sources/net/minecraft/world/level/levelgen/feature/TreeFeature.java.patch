--- a/net/minecraft/world/level/levelgen/feature/TreeFeature.java
+++ b/net/minecraft/world/level/levelgen/feature/TreeFeature.java
@@ -136,7 +_,7 @@
             @Override
             public void set(BlockPos pos, BlockState state) {
                 set2.add(pos.immutable());
-                worldGenLevel.setBlock(pos, state, 19);
+                worldGenLevel.setBlock(pos, state.getBlock().defaultBlockState(), 19);
             }
 
             @Override
@@ -155,77 +_,9 @@
                 treeConfiguration.decorators.forEach(decorator -> decorator.place(context1));
             }
 
-            return BoundingBox.encapsulatingPositions(Iterables.concat(set, set1, set2, set3)).map(boundingBox -> {
-                DiscreteVoxelShape discreteVoxelShape = updateLeaves(worldGenLevel, boundingBox, set1, set3, set);
-                StructureTemplate.updateShapeAtEdge(worldGenLevel, 3, discreteVoxelShape, boundingBox.minX(), boundingBox.minY(), boundingBox.minZ());
-                return true;
-            }).orElse(false);
+            return net.minecraft.world.level.levelgen.structure.BoundingBox.encapsulatingPositions(com.google.common.collect.Iterables.concat(set, set1, set2, set3)).isPresent();
         } else {
             return false;
-        }
-    }
-
-    private static DiscreteVoxelShape updateLeaves(
-        LevelAccessor level, BoundingBox box, Set<BlockPos> rootPositions, Set<BlockPos> trunkPositions, Set<BlockPos> foliagePositions
-    ) {
-        DiscreteVoxelShape discreteVoxelShape = new BitSetDiscreteVoxelShape(box.getXSpan(), box.getYSpan(), box.getZSpan());
-        int i = 7;
-        List<Set<BlockPos>> list = Lists.newArrayList();
-
-        for (int i1 = 0; i1 < 7; i1++) {
-            list.add(Sets.newHashSet());
-        }
-
-        for (BlockPos blockPos : Lists.newArrayList(Sets.union(trunkPositions, foliagePositions))) {
-            if (box.isInside(blockPos)) {
-                discreteVoxelShape.fill(blockPos.getX() - box.minX(), blockPos.getY() - box.minY(), blockPos.getZ() - box.minZ());
-            }
-        }
-
-        BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
-        int i2 = 0;
-        list.get(0).addAll(rootPositions);
-
-        while (true) {
-            while (i2 >= 7 || !list.get(i2).isEmpty()) {
-                if (i2 >= 7) {
-                    return discreteVoxelShape;
-                }
-
-                Iterator<BlockPos> iterator = list.get(i2).iterator();
-                BlockPos blockPos1 = iterator.next();
-                iterator.remove();
-                if (box.isInside(blockPos1)) {
-                    if (i2 != 0) {
-                        BlockState blockState = level.getBlockState(blockPos1);
-                        setBlockKnownShape(level, blockPos1, blockState.setValue(BlockStateProperties.DISTANCE, Integer.valueOf(i2)));
-                    }
-
-                    discreteVoxelShape.fill(blockPos1.getX() - box.minX(), blockPos1.getY() - box.minY(), blockPos1.getZ() - box.minZ());
-
-                    for (Direction direction : Direction.values()) {
-                        mutableBlockPos.setWithOffset(blockPos1, direction);
-                        if (box.isInside(mutableBlockPos)) {
-                            int i3 = mutableBlockPos.getX() - box.minX();
-                            int i4 = mutableBlockPos.getY() - box.minY();
-                            int i5 = mutableBlockPos.getZ() - box.minZ();
-                            if (!discreteVoxelShape.isFull(i3, i4, i5)) {
-                                BlockState blockState1 = level.getBlockState(mutableBlockPos);
-                                OptionalInt optionalDistanceAt = LeavesBlock.getOptionalDistanceAt(blockState1);
-                                if (!optionalDistanceAt.isEmpty()) {
-                                    int min = Math.min(optionalDistanceAt.getAsInt(), i2 + 1);
-                                    if (min < 7) {
-                                        list.get(min).add(mutableBlockPos.immutable());
-                                        i2 = Math.min(i2, min);
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-
-            i2++;
         }
     }
 }
